import sys
import argparse
import math

# Создаём парсер
parser = argparse.ArgumentParser(description="Расчет показателей кредита")
# Определяем аргументы
parser.add_argument("--type", type=str)
parser.add_argument("--payment", type=float)
parser.add_argument("--principal", type=float)
parser.add_argument("--periods", type=int)
parser.add_argument("--interest", type=float)
# Парсим аргументы
args = parser.parse_args()
principal = args.principal
interest = args.interest
periods = args.periods
payment = args.payment
type = args.type

def count_periods_annuity(payment, principal, interest):
    i = interest / (12 * 100)
    x = payment / (payment - (i * principal))
    y = i + 1
    return math.ceil((math.log(x, y)))


def count_payment_annuity(periods, principal, interest):
    i = interest / (12 * 100)
    return math.ceil(principal * ((i * (1 + i) ** periods) / (((1 + i) ** periods) - 1)))


def count_principal_annuity(periods, payment, interest):
    i = interest / (12 * 100)
    return math.ceil((payment / (i * (1 + i) ** periods / ((1 + i) ** periods - 1))))

def count_payment_dif(periods, principal, interest):
    i = interest / (12 * 100)
    payment_sum = 0
    for j in range(1, periods + 1):
        payment = math.ceil(principal / periods + i * (principal - ((principal * (j - 1)) / periods)))
        print('Month', j, ': payment is ',  payment, sep ='')
        payment_sum += payment
    print('')
    print('Overpayment:', math.ceil(payment_sum - principal))

def count_overpayment(periods, principal, payment):
    overpayment = math.ceil(periods * payment - principal)
    print('')
    print('Overpayment:', overpayment)

if (periods is not None and periods < 0) or (principal is not None and principal < 0) or (payment is not None and payment< 0)  or (interest is not None and interest < 0):
    print('Incorrect parameters')
else:
    if type == 'annuity':
        if interest is None:
            print("Incorrect parameters")
        elif principal is None and payment is None or principal is None and periods is None or payment is None and periods is None:
            print("Incorrect parameters")
        else:
            if principal is None:
                principal = count_principal_annuity(periods, payment, interest)
                print('Your loan principal = ', principal, '!', sep='')
                count_overpayment(periods, principal, payment)

            if payment is None:
                payment = count_payment_annuity(periods, principal, interest)
                print('Your monthly payment =', payment, '!', sep='')
                count_overpayment(periods, principal, payment)

            if periods is None:
                periods = count_periods_annuity(payment, principal, interest)
                periods_year = periods // 12
                periods_months = periods % 12
                if periods_year > 0:
                    if periods_months > 0:
                        print('It will take', periods_year, 'years and', periods_months, 'months to repay this loan!')
                    else:
                        print('It will take', periods_year, 'years')
                else:
                    print('It will take', periods_months, 'months to repay this loan!')
                count_overpayment(periods, principal, payment)

    elif type == 'diff':
        if payment is not None:
            print('Incorrect parameters')
        elif principal is None or interest is None or periods is None:
            print("Incorrect parameters")
        else:
            count_payment_dif(periods, principal, interest)
    else:
        print("Incorrect parameters")
